function [y1,xf1] = TimeSeries_function(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-May-2023 13:23:13.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x3 matrix, initial 3 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x3 matrix, final 3 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 12000;
x1_step1.gain = 2.50375563345018e-07;
x1_step1.ymin = -1;

% Layer 1
b1 = [4.7881012349528866423;4.5421350291369790853;-4.2968863122743918836;4.0513247117793742547;3.8057576347294053143;-3.5602939270699005547;-3.3197954939070859481;3.0423412629293520304;-2.8236356314772366183;2.5546232223759726132;2.3373309235155192987;-2.0882728423599452583;-1.8406620012321366353;-1.585187700327926219;1.3687511022459892818;-1.0875352672862785841;0.85505016809481182438;0.60895645646223284242;-0.36357956055497880898;-0.067536596880195032266;0.13063893912094975969;0.53370809688392939485;-0.60798805875741301907;1.2089384720078169;-1.1153892937535425656;-1.4269152903898010276;1.5651880859614739627;-1.865532004800875221;-2.0891460328142619218;2.2583094491401634052;-2.5787825667590840162;2.8236769218255313163;-3.1204682496852012008;-3.3150464456559411985;3.5602949654213240649;-3.8463834343949518946;-4.0553172036485571894;-4.2968626952136066421;4.3300243089128329643;4.8093383086878462862];
IW1_1 = [-1.7987880067754826729 3.7861271797823401464 -2.3138366729359449714;-3.2022321581912795985 -3.5499981193826268822 -0.26061971745948303569;2.3891855808276396544 -3.0723122807811784618 2.7887309967042148706;-0.72298769421066444441 1.7236390936793746231 -4.408020067401633213;-2.8626494913238222928 -2.5881536382143401909 -2.8338875647033439087;2.362454333540106699 3.1588689180930371592 2.7138070011928792091;4.4623356547110537562 1.2131313684393763008 1.2365165087439944358;-3.6379803507454777645 3.0096428541930051459 -0.84920648617169625094;2.4022606275808482401 -2.6228881341617809042 3.2052909107241269737;-3.4499542641151781375 3.3197805661084167639 -0.30047416753233169295;-3.3362769055216321412 1.7910263015873442161 2.9243141527002118885;0.38387255951298876466 4.7725098671015180329 -0.037832537473791671978;3.3917917017017327197 -0.551981752723227026 3.3338080404756493813;2.805981182966866605 -3.2555998333677700352 2.1112758996646201481;-1.6178791514815960007 -3.2507795206863749904 3.1611064135614581616;1.8190400708985043909 -1.5106449218689388392 -4.1741439777993845084;-1.2977103853093072683 -3.8300974283572664092 2.6348954589651985003;-1.6255615703206549583 -3.8100826382907797552 -2.3977898982898784297;4.439194888880249934 1.2589360035028336338 1.2817309704174848495;0.87039136953481732739 4.6807032650499822424 0.42488173674010487613;2.9845608646158483523 -2.2472585068739960867 -2.9984642259449660884;2.9454693572707801863 -3.6701058729521980339 0.57661150775413638758;-2.5963025886032244927 3.0458224191875893361 2.6232569666798073449;1.0469440557510580891 2.6092416414020749293 -3.7699048078962178465;-1.1798209183611503281 -2.0969693113594707334 -4.1324106582164654711;-2.7866483826160903803 -3.1841283385802992001 2.1639490479178959959;1.2023089882314872412 2.3758869186998876621 -3.9777066821254187801;-0.038069492893790281285 -3.4372236071215001019 -3.3123178774198582808;-4.4098793591110343471 -0.3885654642214687593 -1.8155877491246477096;0.27270742271960923819 -0.6356679145319175106 4.7922128023947037079;-3.6726572901780372149 2.0792583506105790647 2.2612455259733437174;2.4044171460818715147 -2.5269895723742967775 -3.2798654922312495685;-4.3760309077755366047 0.81309402759914739534 -1.658831764476843329;-2.5209349382723886812 -3.12104780503670165 -2.6072183115807865406;3.1104234143800435497 -3.1436371806573601972 -1.8349935741990150984;-2.3995215636147957383 -0.4883340819128852428 -4.0571967558261539111;-1.9737821097612855414 -2.4784313950407170779 3.5887226064535613368;-1.3839264864904308183 3.9389000993007616813 2.3439524501112187771;3.984961785423089875 0.28357228356244601475 3.0026381699594719699;1.0025107923353251405 -0.8495216450709054401 4.6118772732108519463];

% Layer 2
b2 = 0.61178358154155454418;
LW2_1 = [0.68460182659097090774 -0.60285563669129416109 -0.3833973970798787434 -0.78274759466876808744 -0.85811876261863873072 -1.1389268328873443092 -0.81408702901927820772 -0.56912585984156016661 -0.1328132032752713243 -0.1121824788961550412 -0.053017796011874049333 -0.59993153726051839936 0.037868000275390500953 0.061399899079825390191 -0.85930915164823684638 -0.67854866983509987133 -1.0219916786908360695 -0.51599040956292463456 0.15317850151914003121 0.5817273333233637933 -0.21500173795178562086 0.087559711571719822665 -1.0287806461114450407 0.52254335214707658963 -0.36876176520823295002 0.29321939916766748269 -0.46697967132395562517 -0.40045451080745742001 0.31718147074826330556 -0.78703006216883575341 0.48532765347009332313 -0.6575846792963128129 0.82972558837899357265 0.16122955111462652922 -0.28001633354445842894 0.61640618305478334094 -1.0897089381879738745 0.36470693680078813959 0.79062222098365542156 0.68461108910828427643];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 2.50375563345018e-07;
y1_step1.xoffset = 12000;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS

    % Rotating delay state position
    xdts = mod(ts+2,4)+1;

    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);

    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2 3]-1,4)+1),3,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);

    % Layer 2
    a2 = b2 + LW2_1*a1;

    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 3);
xits = finalxts(finalxts<=3);
xts = finalxts(finalxts>3)-3;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
